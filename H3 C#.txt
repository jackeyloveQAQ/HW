03 Object-Oriented Programming
Test your knowledge
1. What are the six combinations of access modifier keywords and what do they do? 
public:accessible from everywhere in a project without any restrictions
private:accessible only inside a class or a structure
protected:accessible inside the class and in all classes that derive from that class
internal:access is limited exclusively to classes defined within the current project assembly.
protected internal:protected+internal
private protected:accessible by types derived from the containing class, but only within its containing assembly.
2.What is the difference between the static, const, and readonly keywords when applied to
a type member?
const:can only be set value when you define
readonly:can be set at initial function and define
static:can use for class meaning all parameters and functions inside should be static
can be shared
static function only belongs to class not instance
3. What does a constructor do?
initialize the class instance
4. Why is the partial keyword useful?
Because you can cooperate with your colleague
5. What is a tuple?
data structure consists of multiple parts
6. What does the C# record keyword do?
define a reference type that provides built-in functionality for encapsulating data
7. What does overloading and overriding mean?
overload:multiple methods within the same class with the same name
overriding:re-write father class's function with same name and parameters
8. What is the difference between a field and a property?
A field is a variable of any type that is declared directly in a class. 
A property is a member that provides a flexible mechanism to read, write or compute the value of a private field.
9. How do you make a method parameter optional?
set default value in function declare
10. What is an interface and how is it different from abstract class?
abstract class allows you to create functionality that subclasses can implement or override. 
An interface only allows you to define functionality, not implement it. 
11. What accessibility level are members of an interface?
public
12. True/False. Polymorphism allows derived classes to provide different implementations
of the same method.
True
13. True/False. The override keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
True
14. True/False. The new keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
False
15. True/False. Abstract methods can be used in a normal (non-abstract) class. 
False
16.True/False. Normal (non-abstract) methods can be used in an abstract class. 
True
17. True/False.Derived classes can override methods that were virtual in the base class. 
True
18. True/False.Derived classes can override methods that were abstract in the base class. 
True
19. True/False.In a derived class, you can override a method that was neither virtual non abstract in the
base class.
True
20. True/False. A class that implements an interface does not have to provide an
implementation for all of the members of the interface.
False
21. True/False. A class that implements an interface is allowed to have other members that
aren’t defined in the interface.
True
22. True/False. A class can have more than one base class.
False
23. True/False. A class can implement more than one interface.
True
Working with methods

1. 
       public int[] GenerateNumbers(int length)
        {
            int[] numbers = new int[length];
            Random rnd = new Random();
            for (int i=0;i<length;i++)
            {

                numbers[i] = rnd.Next(1, length);
            }
            return numbers;

        }
       public void reverse(int[] numbers)
        {
            Array.Reverse(numbers);
        }
	public void PrintNumbers(int[] numbers)
        {
            foreach(int i in numbers){
		console.writeline(i);
}
        }

2. 
        public int fib(int idx)
        {   if (idx == 0)
            {
                return 1;
            }
            if (idx == 1)
            {
                return 1;
            } 

            int[] numbers = new int[idx];
            numbers[0] = 1;
            numbers[1] = 1;
            for (int i =2; i < numbers.Length;i++)
            {
                numbers[i] = numbers[i - 1] + numbers[i-2];
            }
            return numbers[numbers.Length - 1];

        }
Designing and Building Classes using object-oriented principles
1. Write a program that that demonstrates use of four basic principles of
object-oriented programming /Abstraction/, /Encapsulation/, /Inheritance/ and
/Polymorphism/.
2. Use /Abstraction/ to define different classes for each person type such as Student
and Instructor. These classes should have behavior for that type of person.
3. Use /Encapsulation/ to keep many details private in each class.
4. Use /Inheritance/ by leveraging the implementation already created in the Person
class to save code in Student and Instructor classes.
5. Use /Polymorphism/ to create virtual methods that derived classes could override to
create specific behavior such as salary calculations.
6. Make sure to create appropriate /interfaces/ such as ICourseService, IStudentService,
IInstructorService, IDepartmentService, IPersonService, IPersonService (should have
person specific methods). IStudentService, IInstructorService should inherit from
IPersonService.
Person
Calculate Age of the Person
Calculate the Salary of the person, Use decimal for salary
Salary cannot be negative number
Can have multiple Addresses, should have method to get addresses
Instructor
Belongs to one Department and he can be Head of the Department
Instructor will have added bonus salary based on his experience, calculate his
years of experience based on Join Date
Student
Can take multiple courses
Calculate student GPA based on grades for courses
Each course will have grade from A to F
Course
Will have list of enrolled students
Department
Will have one Instructor as head
Will have Budget for school year (start and end Date Time)
Will offer list of courses
7. Try creating the two classes below, and make a simple program to work with them, as
described below
Create a Color class:
On a computer, colors are typically represented with a red, green, blue, and alpha
(transparency) value, usually in the range of 0 to 255. Add these as instance variables.
A constructor that takes a red, green, blue, and alpha value.
A constructor that takes just red, green, and blue, while alpha defaults to 255
(opaque).
Methods to get and set the red, green, blue, and alpha values from a Colorinstance.
A method to get the grayscale value for the color, which is the average of the red,
green and blue values.
Create a Ball class:
The Ball class should have instance variables for size and color (the Color class you just
created). Let’s also add an instance variable that keeps track of the number of times it
has been thrown.
Create any constructors you feel would be useful.
Create a Pop method, which changes the ball’s size to 0.
Create a Throw method that adds 1 to the throw count, but only if the ball hasn’t been
popped (has a size of 0).
A method that returns the number of times the ball has been thrown.
Write some code in your Main method to create a few balls, throw them around a few
times, pop a few, and try to throw them again, and print out the number of times that the
balls have been thrown. (Popped balls shouldn’t have changed.)
Explore following topics
Fields
Access modifiers
Enumeration types
Constructors
Methods
Properties
Inheritance
Interfaces
Polymorphism
